name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Get composer cache directory
        id: composer-cache
        run: cd app && echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        working-directory: app
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Node dependencies
        working-directory: app
        run: pnpm i

      - name: Build frontend assets
        working-directory: app
        run: pnpm run build

      - name: Prepare release
        working-directory: app
        run: |
          echo "removing development files..."
          rm -rf tests .github phpunit.xml eslint.config.js .prettierrc .prettierignore resources
          echo "remaining files:"
          ls -la
          
          echo "creating config..."
          cp .env.example .env
          APP_KEY=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
          if grep -q '^APP_KEY=' .env; then
            sed -i "s/^APP_KEY=.*/APP_KEY=${APP_KEY}/" .env
          else
            echo "APP_KEY=${APP_KEY}" >> .env
          fi
          
          echo "cleaning storage directories..."
          find storage -name "*.log" -delete 2>/dev/null || true
          find storage/framework/cache -name "*" -not -name ".gitignore" -delete 2>/dev/null || true
          find storage/framework/sessions -name "*" -not -name ".gitignore" -delete 2>/dev/null || true
          find storage/framework/views -name "*" -not -name ".gitignore" -delete 2>/dev/null || true

      - name: Read version from file
        working-directory: app
        id: version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Create archive
        working-directory: app
        run: |
          zip -r "../dployr-v${{ steps.version.outputs.version }}.zip" . \
            -x ".git/*" \
            -x "node_modules/*" \
            -x ".env" \
            -x "storage/logs/*"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: dployr ${{ steps.version.outputs.version }}
          files: |
            dployr-v${{ steps.version.outputs.version }}.zip
            LICENSE
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          