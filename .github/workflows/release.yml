name: release

on:
  workflow_run:
    workflows: ["tests", "linter"]
    types: [completed]
  pull_request: 
    branches: ["master"]

permissions:
  contents: write

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      - name: Validate version
        id: version
        run: |
          VERSION=$(php -r "echo trim(file_get_contents('VERSION'));")
          echo "Detected version: $VERSION"

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9\.]+)?$ ]]; then
            echo "Invalid version format in VERSION file: $VERSION"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          echo "Checking if tag $TAG already exists..."

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Please bump the version before releasing."
            exit 1
          fi
          echo "Tag $TAG is available."

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Get composer cache directory
        id: composer-cache
        run: cd app && echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Node dependencies
        run: pnpm i

      - name: Build frontend assets
        run: pnpm run build

      - name: Prepare release
        run: |
          echo "removing development files..."
          rm -rf tests .github .cache builds .config .local node_modules phpunit.xml eslint.config.js .editorconfig .gitattributes .gitignore .prettierrc .prettierignore resources/css resources/js
          
          echo "cleaning storage directories..."
          find storage -name "*.log" -delete 2>/dev/null || true
          find storage/framework/cache -name "*" -not -name ".gitignore" -delete 2>/dev/null || true
          find storage/framework/sessions -name "*" -not -name ".gitignore" -delete 2>/dev/null || true
          find storage/framework/views -name "*" -not -name ".gitignore" -delete 2>/dev/null || true

      - name: Create archive
        run: zip -r "../dployr-v${{ steps.version.outputs.version }}.zip" . 

      - name: Create tag
        run: |
          echo "Creating tag..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: dployr ${{ steps.version.outputs.version }}
          files: |
            dployr-v${{ steps.version.outputs.version }}.zip
            LICENSE
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
